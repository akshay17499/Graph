typedef struct node{
    int v;
    int distance;
}node;
void swap(node*a,node*b)
{
    node c;
    c.v = a->v;
    c.distance = a->distance;
    a->v = b->v;
    a->distance = b->distance;
    b->v = c.v;
    b->distance = c.distance;
}
node find_min(node*arr,int *size)
{
  node min = arr[0];
  arr[0] = arr[(*size)-1];
  (*size)--;
  int i = 0;
  while(2*i+1<*size)
  {
	int left = 2*i+1,right = 2*i+2,smallest = left;
	if(right<*size&&arr[left].distance>arr[right].distance)
	smallest = right;

	if(arr[i].distance<arr[smallest].distance)
	break;

	swap(&arr[i],&arr[smallest]);
	i=smallest;
  }
  return min;
}

void insert_heap(node*arr,int*size,int val ,int dis)
{
	arr[*size].distance = dis;
	arr[(*size)++].v = val;
	int i = *size-1;
	while(i>0)
	{
		int parent = (i-1)/2;
		if(arr[i].distance<arr[parent].distance)
		{
			swap(&arr[i],&arr[parent]);
			i=parent;
		}
		else
		break;
	} 
}


int networkDelayTime(int** times, int tsize, int* timesColSize, int n, int k)
{
   int distance[n+1];
   bool visited[n+1];
   int graph[n+1][n+1];
   for(int i=0;i<n+1;i++)
   {
    distance[i] = INT_MAX;
    visited[i] = false;
    for(int j=0;j<n+1;j++)
    graph[i][j]=-1;
   }
   for(int i=0;i<tsize;i++)
   {
    graph[times[i][0]][times[i][1]] = times[i][2];
   }
    node queue[6009];
    int size =0;
    queue[size].v = k;
    queue[size++].distance = 0;
    distance[k] = 0;
    //visited[k] = true;
    node min;
    int count=0;
    while(size>0)
    {
         min =  find_min(queue,&size);
         //printf(" min.v %d  min.dis %d\n",min.v,min.distance);
        //n--;
		if(visited[min.v])
		continue;
        count++;
        if(count==n)
        return min.distance;

		visited[min.v]= true;
		for(int i=0;i<n+1;i++)
		{
			if(graph[min.v][i]!=-1&&!visited[i])
			{
               // n--;
				int new_d = min.distance + graph[min.v][i];
				if(distance[i]>new_d)
				distance[i] = new_d;
				insert_heap(queue,&size,i,distance[i]);//check
			}
		}
    }
    return -1;
}
